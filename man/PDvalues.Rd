% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllFunctions.R
\name{PDvalues}
\alias{PDvalues}
\title{Compute Predictive Distribution via Particle Filtering}
\usage{
PDvalues(theta, mod)
}
\arguments{
\item{theta}{Numeric vector. Parameter vector containing marginal and ARMA parameters.}

\item{mod}{A list with model specifications, including:
\itemize{
\item \code{DependentVar}: observed count series
\item \code{CountDist}: count distribution (e.g., "Poisson", "Negative Binomial")
\item \code{ARMAModel}: vector of length 2 specifying AR and MA orders
\item \code{ParticleNumber}: number of particles to use
\item \code{nreg}: number of regressors
\item \code{mypdf}: function to compute marginal PDF
\item \code{mycdf}: function to compute marginal CDF
\item \code{n}: sample size
\item \code{maxdiff}: convergence threshold for Innovations Algorithm
}}
}
\value{
A numeric matrix of dimension \code{2 x n}, where each column corresponds to a time point:
\itemize{
\item First row: lower tail probability for the observed count
\item Second row: predictive probability mass at \code{Y_t + 1}
}
}
\description{
Modifies the standard particle filtering procedure to return the \strong{predictive distribution}
at each time point of a latent Gaussian count time series model, instead of just the log-likelihood.
}
\details{
This function runs a particle filter with resampling to estimate the predictive distribution
of the latent state at each time point. It leverages the Innovations Algorithm to calculate
ARMA-based forecasts of the latent process and approximates conditional distributions using
truncated normal draws.

The predictive distribution is calculated by integrating over the particle population, adjusted
via importance weights. If any weights become numerically unstable (e.g., sum to 0 or include NA),
the function returns a large penalty value (\code{1e8}).

Random number generator state is preserved using \code{get_rand_state()} and \code{set_rand_state()}.
}
\examples{
\dontrun{
mod <- list(DependentVar = y, CountDist = "Poisson", ARMAModel = c(1, 0),
            ParticleNumber = 100, mycdf = ppois, mypdf = dpois, n = length(y),
            maxdiff = 1e-4, nreg = 0)
theta <- c(2.5, 0.3)
PDvalues(theta, mod)
}

}
\references{
Kechagias, S., Livsey, J., & Pipiras, V. (2020). Latent Gaussian Count Time Series Modeling.
\emph{arXiv:1811.00203}. \url{https://arxiv.org/abs/1811.00203}
}
\seealso{
\code{\link{ComputeWeights}}, \code{\link{SampleTruncNormParticles}}, \code{\link{InnovAlg}}
}
