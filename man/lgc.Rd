% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lgc.R
\name{lgc}
\alias{lgc}
\title{Main Wrapper for Fitting Latent Gaussian Count Time Series Models}
\usage{
lgc(
  formula = NULL,
  data = NULL,
  EstMethod = "PFR",
  CountDist = NULL,
  ARMAModel = NULL,
  ParticleNumber = 5,
  epsilon = 0.5,
  initialParam = NULL,
  TrueParam = NULL,
  Task = "Evaluation",
  SampleSize = NULL,
  nsim = NULL,
  no_cores = 1,
  OptMethod = "L-BFGS-B",
  OutputType = "list",
  ParamScheme = NULL,
  maxdiff = 10^(-8),
  ntrials = NULL,
  ...
)
}
\arguments{
\item{formula}{An object of class \code{formula} (e.g., \code{y ~ x1 + x2}). Specifies the response and regressors.}

\item{data}{A data frame containing the variables used in the formula.}

\item{EstMethod}{Character. Estimation method to use. Default is \code{"PFR"} (particle filter with resampling).}

\item{CountDist}{Character. Distribution of the count variable. Supported: \code{"Poisson"}, \code{"Negative Binomial"}, \code{"ZIP"}, etc.}

\item{ARMAModel}{Numeric vector of length 2 specifying AR and MA orders (e.g., \code{c(1,1)} for ARMA(1,1)).}

\item{ParticleNumber}{Number of particles to use in the particle filter.}

\item{epsilon}{Numeric. Smoothing parameter for the resampling step (if applicable).}

\item{initialParam}{Optional. Numeric vector of initial parameter values. If \code{NULL}, estimates are generated internally.}

\item{TrueParam}{Optional. True parameter vector used when \code{Task == "Simulation"}.}

\item{Task}{Character. Specifies the task to perform: \code{"Evaluation"}, \code{"Optimization"}, or \code{"Simulation"}.}

\item{SampleSize}{Integer. Used only when \code{Task == "Simulation"}.}

\item{nsim}{Integer. Number of simulations to run (if \code{Task == "Simulation"}).}

\item{no_cores}{Number of CPU cores to use in parallel computing (only for simulation).}

\item{OptMethod}{Optimization method passed to \code{optimx} (e.g., \code{"L-BFGS-B"}).}

\item{OutputType}{Output format: \code{"list"} (default) or \code{"wide"}.}

\item{ParamScheme}{Optional. Parameterization scheme name (if applicable).}

\item{maxdiff}{Numeric. Convergence threshold for the Innovations algorithm.}

\item{ntrials}{Integer. Required if \code{CountDist == "Binomial"} to specify number of trials.}

\item{...}{Additional arguments (currently unused).}
}
\value{
If \code{Task} is \code{"Evaluation"} or \code{"Optimization"}, returns a list of class \code{"lgc"} containing:
\itemize{
\item \code{ParamEstimates}, \code{StdErrors}, \code{FitStatistics}, \code{OptimOutput}
\item \code{residuals}: Model residuals
\item \code{Model}, \code{Task}, \code{EstMethod}, \code{SampleSize}, etc.
}

If \code{Task == "Simulation"}, returns a list of \code{lgc} objects (length = \code{nsim}).
}
\description{
Fits latent Gaussian count models using particle filtering methods for various count distributions
(e.g., Poisson, Negative Binomial, Zero-Inflated Poisson) and optional ARMA dependencies and regressors.
The function supports tasks such as model evaluation, optimization, and simulation.
}
\details{
This function serves as the main interface for the \code{lgc} package. It parses inputs, prepares model specifications,
fits the model via particle filtering with optional optimization, and computes residuals using results from
\href{https://doi.org/10.1080/01621459.2021.1944874}{Jia et al. (2021)}.
}
\examples{
CountDist      = "Generalized Poisson"
alpha          = 1
b0             = 0.5
b1             = 2
MargParm       = c(b0,b1,alpha)
ARParm         = 0.75
MAParm         = NULL
ARMAModel      = c(length(ARParm),length(MAParm))
SampleSize     = 50
Regressor      = rbinom(SampleSize,1,0.1)
Intercept      = TRUE

# simulate data with the old lgc function
set.seed(1)
DependentVar  = sim_lgc(SampleSize, CountDist, MargParm, ARParm, MAParm, Regressor,Intercept)

# save the data in a data frame
df = data.frame(DependentVar, Regressor)

# specify the regression model
formula = DependentVar~Regressor

# specify task
Task = "Evaluation"

# specify parameters to evaluate the log-likelihood
initialParam = c(MargParm, ARParm, MAParm)

# call the wrapper function with less arguments
mylgc = lgc(formula   = formula,
            data      = df,
            CountDist = CountDist,
            ARMAModel = ARMAModel,
           Task = Task,
            initialParam = initialParam)

# check the results
summary(mylgc)
}
\references{
Jia, Y., Kechagias, S., Livsey, J., Lund, R., & Pipiras, V. (2021). Latent Gaussian Count Time Series.
\emph{Journal of the American Statistical Association}, 118(541), 596â€“606.
\doi{10.1080/01621459.2021.1944874}
}
